(*
 * Copyright 2017 Cedric LE MOIGNE, cedlemo@gmx.com
 * This file is part of OCaml-GObject-Introspection.
 *
 * OCaml-GObject-Introspection is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * OCaml-GObject-Introspection is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OCaml-GObject-Introspection.  If not, see <http://www.gnu.org/licenses/>.
 *)

open Ctypes

(** Bindings_utils module : Regroups a set of functions needed in almost all the
    Builder* modules. *)

(** Helper to write clean code with optional values. *)
module Option : sig
  val value : default:'a -> 'a option -> 'a
end

(** Add an open directives in a file for a module name.*)
val write_open_module:
  Pervasives.out_channel -> string -> unit

(** Add the line "open Ctypes\n" in a file. *)
val add_open_ctypes:
  Pervasives.out_channel -> unit

(** Add the line "open Foreign\n" in a file. *)
val add_open_foreign:
  Pervasives.out_channel -> unit

(** Add empty line in a file. *)
val add_empty_line:
  Pervasives.out_channel -> unit

(** Add information in comment. *)
val add_comments:
  Pervasives.out_channel -> string -> unit

(** Uses this to check if a autogenerated variable name does not match an
    OCaml keyword (ie: end ...). If so, it prepends "_" to the name.*)
val escape_OCaml_keywords:
  string -> string

(** Check if the string given in argument is not a string name of an OCaml type.
    If so, it prepends "_" to the name. *)
val escape_OCaml_types:
  string -> string

(** Check if the string given in argument is not a string name of a Ctypes type.
    If so, it prepends "_" to the name. *)
val escape_Ctypes_types:
  string -> string

(** Check if an autogenerated variable name start or not with a number. *)
val has_number_at_beginning:
  string -> bool

(** Check if an autogenerated variable name does not start with a number. If so
    it prepends a "_". *)
val escape_number_at_beginning:
  string -> string

(** Check if the string given in argument
    is not an OCaml keyword ,
    is not an OCaml type name,
    is not a Ctypes type name,
    or does not start with a number.
    If so, prepends "_" to the name. *)
val ensure_valid_variable_name:
  string -> string

(** Get the bindings name of a C data from its BaseInfo. Only complex C data
    structure need to use it (ie: structure, union, enum, flags, interface and
    gobject.)*)
val get_bindings_name:
  Base_info.t structure ptr -> string option

(** Test if a string starts with a pattern. Returns false if the string length
    is inferior to the pattern length, returns false if the beginning of the
    string does not match exactly to the pattern. *)
val starts_with:
    string -> string -> bool

type pattern_found = NotFound | Position of int * int

(** Find the first occurence of a pattern in a string. Returns None if no patterns
    was found or the position (start and length). *)
val find_first_occurence:
  string -> string -> pattern_found

(** Remove each occurence of a pattern in a string. *)
val remove:
  string -> string -> string

(** Type strings representation used in the bindings for a Types tag. *)
type type_strings = { ocaml : string;
                      ctypes : string }

(** Type strings representation for Types tag both implemented or not. *)
type bindings_types = Not_implemented of string | Types of type_strings

(** Obtain from a Types.tag the type strings to use in bindings for a Types.tag
    if implemented. Returns Not_implemented with the tag name if not implemented.
    This is for simple scalar type (ie. with Bind_enum.get_storage_type) .*)
val type_tag_to_bindings_types:
  Types.tag -> bindings_types

(** Obtain from a Type_info.t the type strings to use in bindings.
    Returns Not_implemented with the tag name if not implemented. *)
val type_info_to_bindings_types:
  Type_info.t structure ptr -> bool -> bindings_types
